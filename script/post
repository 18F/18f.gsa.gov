#!/usr/bin/env ruby
require 'fileutils'
require 'jekyll'
require 'optparse'
require 'yaml'

options = {}
OptionParser.new do |opts|
	opts.banner = "Usage: script/post [options]"

	opts.on('-t', '--title TITLE', 'Post title (Required)') { |v| options[:title] = v }
	opts.on('-d', '--date DATE', 'Date published (default, today)') { |v| options[:date] = v }
	opts.on('-i', '--image IMAGE', 'Post image') { |v| options[:image] = v }
	opts.on('-a', '--author AUTHOR', 'Post author (comma separated)') { |v| options[:author] = v }
	opts.on('-g', '--tags TAGS', 'Tags for this post (comma separated)') { |v| options[:tags] = v }
	opts.on('-c', '--content CONTENT', 'A markdown file containing the post\'s text') { |v| options[:content] = v}
end.parse!
raise OptionParser::MissingArgument if options[:title].nil?

unless options[:date]
	date = Date.today.to_s
else
	date = Date.parse(options[:date]).strftime("%Y-%m-%d")
end

# readContent takes a markdown filename and outputs the content
#
# This method takes a path and filename as its only parameter. If given a path that 
# starts with a tilde (~), the script will expand the path to the user's home 
# directory. If given a path that does not start with a '/' the script will 
# append that path to the current file.
#
# The script will return an error to STDERR if the passed parameter is not a 
# markdown file or if the file does not exist. Otherwise it returns the 
# contents of the passed file.
#
# Author:: Greg Boone (mailto:gregory.boone@gsa.gov)
# Copyright:: To the extent possible the contents of this method and the entire 
# 			 script are public domain works
# License:: CC0
def readContent(file)
	if file[0] == '~'
		file[0] == File.expand_path('~')
	elsif file[0] != '/'
		file[0] = File.dirname(__FILE__)
	end
	if File.exists?(file)
		content = open(file).read
	else
		abort("There was an error loading #{file}.")
	end
	abort("You must pass a markdown file to this script.") unless File.extname(file) == '.md'
	return content.strip()
end

title = options[:title]
slug = title.downcase.strip.gsub(' ', '-').gsub(/[^\w-]/, '')
authors = options[:author].strip.split(', ') unless options[:author].nil?
tags = options[:tags].strip.split(', ') unless options[:tags].nil?

filename = "#{date}-#{slug}.md"
path = File.join(Jekyll.configuration['source'], "_posts", filename)
frontmatter = {}
frontmatter[:title] = title
frontmatter[:date] = date
frontmatter[:layout] = 'post'
frontmatter[:image] = options[:image]
frontmatter[:tags] = tags
frontmatter[:authors] = authors
frontmatter[:description] = nil
frontmatter[:excerpt] = nil

content = Array.new(1) { readContent(options[:content]) }
load = YAML.load(frontmatter.to_json)
yaml = YAML.dump(load)
File.open(path, 'w') { |file| file.write("#{yaml}---\n #{content[0]}" ) }
